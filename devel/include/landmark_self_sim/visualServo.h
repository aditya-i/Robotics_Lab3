// Generated by gencpp from file landmark_self_sim/visualServo.msg
// DO NOT EDIT!


#ifndef LANDMARK_SELF_SIM_MESSAGE_VISUALSERVO_H
#define LANDMARK_SELF_SIM_MESSAGE_VISUALSERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace landmark_self_sim
{
template <class ContainerAllocator>
struct visualServo_
{
  typedef visualServo_<ContainerAllocator> Type;

  visualServo_()
    : distance(0.0)  {
    }
  visualServo_(const ContainerAllocator& _alloc)
    : distance(0.0)  {
    }



   typedef double _distance_type;
  _distance_type distance;




  typedef boost::shared_ptr< ::landmark_self_sim::visualServo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::landmark_self_sim::visualServo_<ContainerAllocator> const> ConstPtr;

}; // struct visualServo_

typedef ::landmark_self_sim::visualServo_<std::allocator<void> > visualServo;

typedef boost::shared_ptr< ::landmark_self_sim::visualServo > visualServoPtr;
typedef boost::shared_ptr< ::landmark_self_sim::visualServo const> visualServoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::landmark_self_sim::visualServo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::landmark_self_sim::visualServo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace landmark_self_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'landmark_self_sim': ['/home/hoang/lab3_ws/src/landmark_self_sim/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::landmark_self_sim::visualServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::landmark_self_sim::visualServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmark_self_sim::visualServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmark_self_sim::visualServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmark_self_sim::visualServo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmark_self_sim::visualServo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::landmark_self_sim::visualServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acff7fda0c683c872875f5c4b069f124";
  }

  static const char* value(const ::landmark_self_sim::visualServo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacff7fda0c683c87ULL;
  static const uint64_t static_value2 = 0x2875f5c4b069f124ULL;
};

template<class ContainerAllocator>
struct DataType< ::landmark_self_sim::visualServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "landmark_self_sim/visualServo";
  }

  static const char* value(const ::landmark_self_sim::visualServo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::landmark_self_sim::visualServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
float64 distance\n\
";
  }

  static const char* value(const ::landmark_self_sim::visualServo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::landmark_self_sim::visualServo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct visualServo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::landmark_self_sim::visualServo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::landmark_self_sim::visualServo_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANDMARK_SELF_SIM_MESSAGE_VISUALSERVO_H
